// module "types.js"
"use strict";

const extractName = (entity) => { return entity.name; };
const extractBezeichnung = (entity) => { return new Option(entity.name, entity.bezeichnung, entity.abbildung) };
const extractGattung = (entity) => { return new Option(entity.gattung, entity.gattung); };

const ACHSFOLG_DROP = new DropDown(apiRoot() + "achsfolg", extractName, extractBezeichnung);
const ADRESS_TYP_DROP = new DropDown(apiRoot() + "enums/adressTyp", extractName, extractBezeichnung);
const ANTRIEB_DROP = new DropDown(apiRoot() + "antrieb", extractName, extractBezeichnung);
const ARTIKEL_DROP = new DropDown(apiRoot() + "artikel", (entity) => { return entity.artikelId; }, extractName);
const AUFBAU_DROP = new DropDown(apiRoot() + "aufbau", extractName, extractBezeichnung);
const BAHNVERWALTUNG_DROP = new DropDown(apiRoot() + "bahnverwaltung", extractName, extractBezeichnung);
const DECODER_DROP = new DropDown(apiRoot() + "decoder", (entity) => { return entity.decoderId; }, extractName);
const EPOCH_DROP = new DropDown(apiRoot() + "epoch", extractName, extractBezeichnung);
const GATTUNG_DROP = new DropDown(apiRoot() + "gattung", extractName, extractBezeichnung);
const HERSTELLER_DROP = new DropDown(apiRoot() + "hersteller", extractName, extractBezeichnung);
const KATEGORIE_DROP = new DropDown(apiRoot() + "kategorie", extractName, extractBezeichnung);
const KONFIGURATION_DROP = new DropDown(apiRoot() + "enums/konfiguration", extractName, extractBezeichnung);
const KUPPLUNG_DROP = new DropDown(apiRoot() + "kupplung", extractName, extractBezeichnung);
const LAND_DROP = new DropDown(apiRoot() + "land", extractName, extractBezeichnung);
const LICHT_DROP = new DropDown(apiRoot() + "licht", extractName, extractBezeichnung);
const MASSSTAB_DROP = new DropDown(apiRoot() + "massstab", extractName, extractBezeichnung);
const MOTOR_TYP_DROP = new DropDown(apiRoot() + "motorTyp", extractName, extractBezeichnung);
const PROTOKOLL_DROP = new DropDown(apiRoot() + "protokoll", extractName, extractBezeichnung);
const SONDERMODELL_DROP = new DropDown(apiRoot() + "sondermodell", extractName, extractBezeichnung);
const SPURWEITE_DROP = new DropDown(apiRoot() + "spurweite", extractName, extractBezeichnung);
const STATUS_DROP = new DropDown(apiRoot() + "enums/status", extractName, extractBezeichnung);
const STECKER_DROP = new DropDown(apiRoot() + "enums/stecker", extractName, extractBezeichnung);
const STEUERUNG_DROP = new DropDown(apiRoot() + "steuerung", extractName, extractBezeichnung);
const VORBILD_DROP = new DropDown(apiRoot() + "vorbild", extractGattung, extractGattung);
const WAHRUNG_DROP = new DropDown(apiRoot() + "wahrung", extractName, extractBezeichnung);
const ZUG_TYP_DROP = new DropDown(apiRoot() + "zugTyp", extractName, extractBezeichnung);

const extractProduktValue = (entity) => { return entity.hersteller.name + "/" + entity.bestellNr ; };
const extractProduktOption = (entity) => { return new Option( extractHersteller(entity), entity.hersteller.bezeichnung + " - " + entity.bestellNr); };
const extractKategorieValue = (entity) => { return entity.kategorie.name + "/" + entity.name; };
const extractKategorieOption = (entity) => { return new Option( extractKategorieValue(entity), entity.kategorie.bezeichnung + " - " + entity.bezeichnung); };

const DECODER_TYP_DROP = new DropDown(apiRoot() + "decoderTyp", extractProduktValue, extractProduktOption);
const PRODUKT_DROP = new DropDown(apiRoot() + "produkt", extractProduktValue, extractProduktOption);
const UNTER_KATEGORIE_DROP = new DropDown(apiRoot() + "kategorie/unterKategorien", extractKategorieValue, extractKategorieOption);

const setter = () => {};

const ABBILDUNG = new IMGColumn("Abbildung", "abbildung", (entity) => { return entity.abbildung; }, setter, undefined, Editable.UPDATE, false);
const ACHSFOLG = new SelectColumn("Achsfolg", "achsfolg", (entity) => { return entity.achsfolg ? entity.achsfolg.name : undefined; }, setter,ACHSFOLG_DROP, Editable.UPDATE, false);
const ADRESS_TYP = new SelectColumn("Typ", "typ", (entity) => { return entity.adressTyp ? entity.adressTyp.name : undefined; }, setter,ADRESS_TYP_DROP, Editable.UPDATE, true);
const ANLEITUNGEN = new PDFColumn("Anleitungen", "anleitungen", (entity) => { return entity.anleitungen; }, setter, undefined, Editable.UPDATE, false);
const ANMERKUNG = new TextColumn("Anmerkung", "anmerkung", (entity) => { return entity.anmerkung; }, setter,Editable.UPDATE, false, 30);
const ANTRIEB = new SelectColumn("Antrieb", "antrieb", (entity) => { return entity.antrieb ? entity.antrieb.name : undefined; }, setter,ANTRIEB_DROP, Editable.UPDATE, false);
const ANFAHRZUGKRAFT = new NumberColumn("Anfahrzugkraft", "anfahrzugkraft", (entity) => { return entity.anfahrzugkraft; }, setter,Editable.UPDATE, false, 300000, 1);
const ANZAHL = new NumberColumn("Anzahl", "anzahl", (entity) => { return entity.anzahl; }, setter,Editable.UPDATE, false, 300000, 1);
const ARTIKEL = new SelectColumn("Artikel", "artikel", (entity) => { return entity.artikel ? entity.artikel.name : undefined; }, setter,ARTIKEL_DROP, Editable.UPDATE, false);
const AUFBAU = new SelectColumn("Aufbau", "aufbau", (entity) => { return entity.aufbau ? entity.aufbau.name : undefined; }, setter,AUFBAU_DROP, Editable.UPDATE, false);
const AUSSERDIENST = new NumberColumn("Ausserdienst", "ausserdienst", (entity) => { return entity.ausserdienst; }, setter,Editable.UPDATE, false, 2100, 1800);
const BAHNVERWALTUNG = new SelectColumn("Bahnverwaltung", "bahnverwaltung", (entity) => { return entity.bahnverwalung ? entity.bahnverwalung.name : undefined; }, setter,BAHNVERWALTUNG_DROP, Editable.UPDATE, false);
const BAUZEIT = new NumberColumn("Bauzeit", "bauzeit", (entity) => { return entity.bauzeit; }, setter,Editable.UPDATE, false, 2100, 1800);
const BELADUNG = new TextColumn("Beladung", "beladung", (entity) => { return entity.beladung; }, setter,Editable.UPDATE, false, 30);
const BESTELL_NR = new TextColumn("Bestell Nr", "bestellNr", (entity) => { return entity.bestellNr; }, setter,Editable.ADD, true, 10);
const BETREIBSNUMMER = new TextColumn("Betreibsnummer", "betreibsnummer", (entity) => { return entity.betreibsnummer; }, setter,Editable.UPDATE, false, 30);
const BEZEICHNUNG = new TextColumn("Bezeichnung", "bezeichnung", (entity) => { return entity.bezeichnung; }, setter,Editable.UPDATE, false, 50);
const CONSIST = new TextColumn("Consist", "consist", (entity) => { return entity.consist; }, setter,Editable.UPDATE, false, 30);
const CV = new NumberColumn("CV", "cv", (entity) => { return entity.cv; }, setter,Editable.ADD, true, 127, 1);
const DECIMALS = new NumberColumn("Decimals", "decimals", (entity) => { return entity.decimals; }, setter,Editable.UPDATE, false, 3, 0);
const DECODER = new SelectColumn("Decoder", "decoder", (entity) => { return entity.decoder ? entity.decoder.name : undefined; }, setter,DECODER_DROP, Editable.UPDATE, false);
const DECODER_TYP = new SelectColumn("Decoder Typ", "decoderTyp", (entity) => { return entity.decoderTyp ? extractProduktValue(entity.decoderTyp) : undefined; }, setter,DECODER_TYP_DROP, Editable.UPDATE, false);
const DELETED = new BoolColumn("Deleted", "deleted", (entity) => { return entity.deleted; }, setter,Editable.UPDATE, false);
const DIENSTGEWICHT = new NumberColumn("Dienstgewicht", "dienstgewicht", (entity) => { return entity.dienstgewicht; }, setter,Editable.UPDATE, false, 999, 1);
const DMLAUFRADHINTEN = new NumberColumn("Laufrad Hinten", "dmLaufradHinten", (entity) => { return entity.dmLaufradHinten; }, setter,Editable.UPDATE, false, 3000, 1);
const DMLAUFRADVORN = new NumberColumn("Laufrad Vorn", "dmLaufradVorn", (entity) => { return entity.dmLaufradVorn; }, setter,Editable.UPDATE, false, 3000, 1);
const DMTREIBRAD = new NumberColumn("Treibrad", "dmTreibrad", (entity) => { return entity.dmTreibrad; }, setter,Editable.UPDATE, false, 3000, 1);
const DMZYLINDER = new NumberColumn("Zylinder", "dmZylinder", (entity) => { return entity.dmZylinder; }, setter,Editable.UPDATE, false, 3000, 1);
const DREHGESTELLBAUART = new TextColumn("Drehgestell", "drehgestellBauart", (entity) => { return entity.drehgestellBauart; }, setter,Editable.UPDATE, false, 30);
const EPOCH = new SelectColumn("Epoch", "epoch", (entity) => { return entity.epoch ? entity.epoch.name : undefined; }, setter,EPOCH_DROP, Editable.UPDATE, false);
const EXPLOSIONSZEICHNUNG = new PDFColumn("Explosionszeichnung", "explosionszeichnung", (entity) => { return entity.explosionszeichnung; }, setter, undefined, Editable.UPDATE, false);
const FAHRMOTOREN = new NumberColumn("Fahrmotoren", "fahrmotoren", (entity) => { return entity.fahrmotoren; }, setter,Editable.UPDATE, false, 5, 1);
const FAHRSTUFE = new NumberColumn("Fahrstufe", "fahrstufe", (entity) => { return entity.fahrstufe; }, setter,Editable.UPDATE, false, 127, 1);
const FUNKTION = new TextColumn("Funktion", "funktion", (entity) => { return entity.funktion; }, setter,Editable.ADD, true, 3);
const GATTUNG = new SelectColumn("Gattung", "gattung", (entity) => { return entity.gattung ? entity.gattung.name : undefined; }, setter,GATTUNG_DROP, Editable.UPDATE, false);
const GERAUSCH = new BoolColumn("Gerausch", "gerausch", (entity) => { return entity.sound; }, setter,Editable.UPDATE, true);
const GESCHWINDIGKEIT = new NumberColumn("Geschwindigkeit", "geschwindigkeit", (entity) => { return entity.geschwindigkeit; }, setter,Editable.UPDATE, false, 300, 1);
const HERSTELLER = new SelectColumn("Hersteller", "hersteller", (entity) => { return entity.hersteller ? entity.hersteller.name : undefined.name; }, setter,HERSTELLER_DROP, Editable.ADD, true);
const I_MAX = new NumberColumn("I Max", "iMax", (entity) => { return entity.iMax; }, setter,Editable.UPDATE, false, 1000, 1);
const INDEX = new NumberColumn("Index", "index", (entity) => { return entity.index; }, setter,Editable.ADD, true, 3, 0);
const KAPAZITAT = new NumberColumn("Kapazitat", "kapazitat", (entity) => { return entity.kapazitat; }, setter,Editable.UPDATE, false, 3000, 1, .01);
const KATEGORIE = new SelectColumn("Kategorie", "kategorie", (entity) => { return entity.kategorie ? entity.kategorie.name : undefined; }, setter,KATEGORIE_DROP, Editable.UPDATE, false);
const KAUFDATUM = new DateColumn("Kaufdatum", "kaufdatum", (entity) => { return entity.kaufdatum; }, setter,Editable.UPDATE, false);
const KESSELUEBERDRUCK = new NumberColumn("Kesselueberdruck", "kesselueberdruck", (entity) => { return entity.kesselueberdruck; }, setter,Editable.UPDATE, false, 3000, 0, .01);
const KLASSE = new NumberColumn("Klasse", "klasse", (entity) => { return entity.klasse; }, setter,Editable.UPDATE, false, 4, 0);
const KOLBENHUB = new NumberColumn("Kolbenhub", "kolbenhub", (entity) => { return entity.kolbenhub; }, setter,Editable.UPDATE, false, 3000, 1, .01);
const KONFIGURATION = new SelectColumn("Konfiguration", "konfiguration", (entity) => { return entity.konfiguration ? entity.konfiguration.name : undefined; }, setter,KONFIGURATION_DROP, Editable.UPDATE, true);
const KUPPLUNG = new SelectColumn("Kupplung", "kupplung", (entity) => { return entity.kupplung ? entity.kupplung.name : undefined; }, setter,KUPPLUNG_DROP, Editable.UPDATE, false);
const LAND = new SelectColumn("Land", "land", (entity) => { return entity.land ? entity.land.name : undefined; }, setter,LAND_DROP, Editable.UPDATE, false);
const LANGE = new NumberColumn("Lange", "lange", (entity) => { return entity.lange; }, setter,Editable.UPDATE, false, 50, 1, .01);
const LEISTUNG = new NumberColumn("Leistung", "leistung", (entity) => { return entity.leistung; }, setter,Editable.UPDATE, false, 10000, 0, .01);
const LEISTUNGSUEBERTRAGUNG = new NumberColumn("Leistungsuebertragung", "leistungsuebertragung", (entity) => { return entity.leistungsuebertragung; }, setter,Editable.UPDATE, false, 10000, 0, .01);
const LICHT = new SelectColumn("Licht", "licht", (entity) => { return entity.licht ? entity.licht.name : undefined; }, setter,LICHT_DROP, Editable.UPDATE, false);
const MASSSTAB = new SelectColumn("Massstab", "massstab", (entity) => { return entity.massstab ? entity.massstab.name : undefined; }, setter,MASSSTAB_DROP, Editable.UPDATE, false);
const MAXIMAL = new NumberColumn("Maximal", "maximal", (entity) => { return entity.maximal; }, setter,Editable.UPDATE, false, 30);
const MINIMAL = new NumberColumn("Minimal", "minimal", (entity) => { return entity.minimal; }, setter,Editable.UPDATE, false, 30);
const MITTELWAGEN = new NumberColumn("Mittelwagen", "mittelwagen", (entity) => { return entity.mittelwagen; }, setter,Editable.UPDATE, false, 30, 0);
const MOTOR_TYP = new SelectColumn("MotorTyp", "motorTyp", (entity) => { return entity.motorTyp ? entity.motorTyp.name : undefined; }, setter,MOTOR_TYP_DROP, Editable.UPDATE, false);
const MOTORBAUART = new TextColumn("Motorbauart", "motorbauart", (entity) => { return entity.motorbauart; }, setter,Editable.UPDATE, false, 30);
const NAMEN = new TextColumn("Namen", "namen", (entity) => { return entity.name; }, setter,Editable.ADD, true, 30);
const POSITION = new NumberColumn("Position", "position", (entity) => { return entity.position; }, setter,Editable.UPDATE, false, 30, 0);
const PREIS = new NumberColumn("Preis", "preis", (entity) => { return entity.preis; }, setter,Editable.UPDATE, false, undefined, 0, .01);
const PRODUKT = new SelectColumn("Produkt", "produkt", (entity) => { return entity.produkt ? extractProduktValue(entity.produkt) : undefined; }, setter,PRODUKT_DROP, Editable.UPDATE, false);
const PROGRAMMABLE = new BoolColumn("Programmable", "programmable", (entity) => { return entity.programmable; }, setter,Editable.UPDATE, true);
const PROTOKOLL = new SelectColumn("Protokoll", "protokoll", (entity) => { return entity.protokoll ? entity.protokoll.name : undefined; }, setter,PROTOKOLL_DROP, Editable.UPDATE, true);
const REICHWEITE = new NumberColumn("Reichweite", "reichweite", (entity) => { return entity.reichweite; }, setter,Editable.UPDATE, false, 3000, 0);
const REIHE = new NumberColumn("Reihe", "reihe", (entity) => { return entity.reihe; }, setter,Editable.ADD, true, 1, 0);
const ROSTFLAECHE = new NumberColumn("Rostflaeche", "rostflaeche", (entity) => { return entity.rostflaeche; }, setter,Editable.UPDATE, false, 3000, 0, .01);
const SITZPLATZEKL1 = new NumberColumn("SitzplatzeKL1", "sitzplatzeKL1", (entity) => { return entity.sitzplatzeKL1; }, setter,Editable.UPDATE, false, 300, 0);
const SITZPLATZEKL2 = new NumberColumn("SitzplatzeKL2", "sitzplatzeKL2", (entity) => { return entity.sitzplatzeKL2; }, setter,Editable.UPDATE, false, 300, 0);
const SITZPLATZEKL3 = new NumberColumn("SitzplatzeKL3", "sitzplatzeKL3", (entity) => { return entity.sitzplatzeKL3; }, setter,Editable.UPDATE, false, 300, 0);
const SITZPLATZEKL4 = new NumberColumn("SitzplatzeKL4", "sitzplatzeKL4", (entity) => { return entity.sitzplatzeKL4; }, setter,Editable.UPDATE, false, 300, 0);
const SONDERMODELL = new SelectColumn("Sondermodell", "sonderModell", (entity) => { return entity.sondermodell ? entity.sondermodell.name : undefined; }, setter,SONDERMODELL_DROP, Editable.UPDATE, false);
const SPAN = new NumberColumn("Span", "span", (entity) => { return entity.span; }, setter,Editable.UPDATE, true, 16, 1);
const SPURWEITE = new SelectColumn("Spurweite", "spurweite", (entity) => { return entity.spurweite ? entity.spurweite.name : undefined; }, setter,SPURWEITE_DROP, Editable.UPDATE, false);
const STATUS = new SelectColumn("Status", "status", (entity) => { return entity.status ? entity.status.name : undefined; }, setter,STATUS_DROP, Editable.UPDATE, false);
const STECKER = new SelectColumn("Stecker", "stecker", (entity) => { return entity.stecker ? entity.stecker.name : undefined; }, setter,STECKER_DROP, Editable.UPDATE, false);
const STEUERUNG = new SelectColumn("Steuerung", "steuerung", (entity) => { return entity.steuerung ? entity.steuerung.name : undefined; }, setter,STEUERUNG_DROP, Editable.UPDATE, false);
const STUCK = new NumberColumn("Stuck", "stuck", (entity) => { return entity.stuck; }, setter,Editable.UPDATE, false, 300, 0);
const TEIL = new NumberColumn("Teil", "teil", (entity) => { return entity.teil; }, setter,Editable.UPDATE, false, 300, 0);
const TELEFON = new PhoneColumn("Telefon", "telefon", (entity) => { return entity.telefon; }, setter,Editable.UPDATE, false);
const TRIEBKOEPFE = new NumberColumn("Triebkoepfe", "triebkoepfe", (entity) => { return entity.triebkoepfe; }, setter,Editable.UPDATE, false, 2, 0);
const UEBERHITZERFLAECHE = new NumberColumn("Ueberhitzerflaeche", "ueberhitzerflaeche", (entity) => { return entity.ueberhitzerflaeche; }, setter,Editable.UPDATE, false, 3000, 0, .01);
const UNTER_KATEGORIE = new SelectColumn("Kategorie", "unterKategorie", (entity) => { return entity.unterKategorie ? extractKategorieValue(entity.unterKategorie) : undefined; }, setter,UNTER_KATEGORIE_DROP, Editable.UPDATE, true);
const URL = new URLColumn("Url", "url", (entity) => { return entity.url; }, setter,Editable.UPDATE, false);
const VERDAMPFUNG = new NumberColumn("Verdampfung", "verdampfung", (entity) => { return entity.verdampfung; }, setter,Editable.UPDATE, false, 3000, 0, .01);
const VORBILD = new SelectColumn("Vorbild", "vorbild", (entity) => { return entity.vorbild ? entity.vorbild.name : undefined; }, setter,VORBILD_DROP, Editable.UPDATE, false);
const WAHRUNG = new SelectColumn("Wahrung", "wahrung", (entity) => { return entity.wahrung ? entity.wahrung.name : undefined; }, setter,WAHRUNG_DROP, Editable.UPDATE, false);
const WASSERVORRAT = new NumberColumn("Wasservorrat", "wasservorrat", (entity) => { return entity.wasservorrat; }, setter,Editable.UPDATE, false, 3000, 0, .01);
const WERKSEINSTELLUNG = new NumberColumn("Werkseinstellung", "werkseinstellung", (entity) => { return entity.werkseinstellung; }, setter,Editable.UPDATE, true, 65535, 1);
const WERT = new NumberColumn("Wert", "wert", (entity) => { return entity.wert; }, setter,Editable.UPDATE, false, 65535, 1);
const ZUG = new TextColumn("Zug", "zug", (entity) => { return entity.zug; }, setter,Editable.UPDATE, false, 30);
const ZUG_TYP = new SelectColumn("Typ", "typ", (entity) => { return entity.zug_Typ.name; }, setter,ZUG_TYP_DROP, Editable.UPDATE, false);
const ZYLINDER = new NumberColumn("Zylinder", "sylinder", (entity) => { return entity.zylinder; }, setter,Editable.UPDATE, false, 100, 1);
